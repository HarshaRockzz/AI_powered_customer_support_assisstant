name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      
      - name: Install dependencies
        working-directory: ./backend
        run: go mod download
      
      - name: Run tests
        working-directory: ./backend
        run: go test -v ./...
      
      - name: Run linter
        working-directory: ./backend
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          golangci-lint run ./...

  # RAG Service Tests
  rag-tests:
    name: RAG Service Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        working-directory: ./rag_service
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black
      
      - name: Run linter
        working-directory: ./rag_service
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check .
      
      # - name: Run tests
      #   working-directory: ./rag_service
      #   run: pytest tests/ -v --cov

  # Dashboard Tests
  dashboard-tests:
    name: Dashboard Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install dependencies
        working-directory: ./dashboard
        run: npm ci
      
      - name: Run linter
        working-directory: ./dashboard
        run: npm run lint
      
      - name: Build
        working-directory: ./dashboard
        run: npm run build

  # Docker Build
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [backend-tests, rag-tests, dashboard-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build Backend Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.backend
          push: false
          tags: ai-support-backend:latest
      
      - name: Build RAG Service Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.rag
          push: false
          tags: ai-support-rag:latest
      
      - name: Build Dashboard Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.dashboard
          push: false
          tags: ai-support-dashboard:latest

  # Deploy (placeholder)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Deploy Placeholder
        run: |
          echo "ðŸš€ Deployment step"
          echo "Configure this to deploy to your infrastructure:"
          echo "- AWS ECS"
          echo "- Kubernetes"
          echo "- Fly.io"
          echo "- Or your preferred platform"

